{"version":3,"sources":["../../../api/controllers/mapping.js"],"names":["DAO","Swagger","dao","getInstance","express","require","router","Router","get","req","res","next","response","retrieveAll","validateModel","json","post","delete","module","exports"],"mappings":";;AAAA;;IAAYA,G;;AACZ;;IAAYC,O;;;;AAEZ,IAAMC,MAAMF,IAAIG,WAAJ,CAAgB,SAAhB,CAAZ;;AAEA,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAD,OAAOE,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC,MAAMC,WAAWV,IAAIW,WAAJ,EAAjB;AACAZ,UAAQa,aAAR,CAAsB,UAAtB,EAAkCF,QAAlC;AACA;AACAF,MAAIK,IAAJ,CAAS,EAAC,QAAOH,QAAR,EAAT;AACD,CALD;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBAN,OAAOU,IAAP,CAAY,SAAZ,EAAuB,UAACP,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC;AACA;AACED,MAAIK,IAAJ,CAAS,EAAC,QAAO,CAAC,EAAC,QAAO,OAAR,EAAD,CAAR,EAAT;AACD,CAJL;;AAMA;;;;;;;;;;;;;;;;;;;AAmBAT,OAAOE,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC;AACA;AACCD,MAAIK,IAAJ,CAAS,EAAC,QAAO,EAAC,QAAO,eAAR,EAAR,EAAT;AACD,CAJH;;AAME;;;;;;;;;;;;;;;;;;;AAmBFT,OAAOW,MAAP,CAAc,MAAd,EAAsB,UAACR,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC;AACA;AACCD,MAAIK,IAAJ,CAAS,EAAC,UAAS,8BAAV,EAAT;AACD,CAJJ;;AAOAG,OAAOC,OAAP,GAAiBb,MAAjB","file":"mapping.js","sourcesContent":["import * as DAO from '../daos/'\r\nimport * as Swagger from './swagger'\r\n\r\nconst dao = DAO.getInstance('mapping')\r\n\r\nconst express = require('express')\r\nconst router = express.Router()\r\n\r\n/**\r\n * @swagger\r\n * /mapping:\r\n *   get:\r\n *     description: Retrieve the list of uploaded maps\r\n *     tags:\r\n *       - Mapping\r\n *     produces:\r\n *       - application/json\r\n *     responses:\r\n *       200:\r\n *         description: mapping\r\n *         schema:\r\n *           $ref: '#/definitions/mappings'\r\n */\r\nrouter.get('/', (req, res, next) => {\r\n  const response = dao.retrieveAll()\r\n  Swagger.validateModel('mappings', response)\r\n  //res.send(response)\r\n  res.json({\"data\":response});\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /mapping/upload:\r\n *   post:\r\n *     description: Upload new mapping files\r\n *     tags:\r\n *       - Mapping\r\n *     produces:\r\n *       - application/json\r\n *     consumes:\r\n *        - multipart/form-data\r\n *        - application/x-www-form-urlencoded\r\n *        - binary\r\n *     parameters:\r\n *         - in: formData\r\n *           name: file\r\n *           description: The file to upload\r\n *           type: file\r\n *           required: true\r\n *     responses:\r\n *       200:\r\n *         description: files data\r\n */\r\nrouter.post('/upload', (req, res, next) => {\r\n    //  const response = dao.create(req.body)\r\n    //  Swagger.validateModel('Stock', response)\r\n      res.json({\"data\":[{\"name\":\"file1\"}]})\r\n    })\r\n\r\n/**\r\n * @swagger\r\n * /mapping/{id}:\r\n *   get:\r\n *     description: Retrieve an specific mapping\r\n *     tags:\r\n *       - Mapping\r\n *     produces:\r\n *       - application/json\r\n *     parameters:\r\n *       - name: id\r\n *         description: id of the mapper to retrieve\r\n *         in: path\r\n *         required: true\r\n *         type: number\r\n *     responses:\r\n *       200:\r\n *         description: mapping details\r\n */\r\nrouter.get('/:id', (req, res, next) => {\r\n   // const response = dao.retrieve(parseInt(req.params.id, 10))\r\n   // Swagger.validateModel('Stock', response)\r\n    res.json({\"data\":{\"name\":\"Protocol Name\"}})\r\n  })    \r\n\r\n  /**\r\n * @swagger\r\n * /mapping/{id}:\r\n *   delete:\r\n *     description: delete an specific mapping\r\n *     tags:\r\n *       - Mapping\r\n *     produces:\r\n *       - application/json\r\n *     parameters:\r\n *       - name: id\r\n *         description: id of the mapper to delete\r\n *         in: path\r\n *         required: true\r\n *         type: number\r\n *     responses:\r\n *       200:\r\n *         description: delete mapping summary\r\n */\r\nrouter.delete('/:id', (req, res, next) => {\r\n    // const response = dao.retrieve(parseInt(req.params.id, 10))\r\n    // Swagger.validateModel('Stock', response)\r\n     res.json({\"meaage\":\"Mapping deleted successfully\"})\r\n   })\r\n\r\n\r\nmodule.exports = router\r\n"]}