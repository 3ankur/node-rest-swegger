{"version":3,"sources":["../../../api/daos/sttm-dao.js"],"names":["SttmDAO","data","Map","createMapping","id","sponserName","sourceSystem","entityMap","mapStatus","mapComplitionPer","set","Array","from","values","has","get","Error","lastUpdate","stock","retrieve","createStock","name","currentPrice"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,O;AACnB,qBAAe;AAAA;;AACb,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;;AAEA,SAAKC,aAAL,CAAmB,CAAnB,EAAsB,gBAAtB,EAAuC,MAAvC,EAA+C,OAA/C,EAAuD,OAAvD,EAA+D,KAA/D;AACA,SAAKA,aAAL,CAAmB,CAAnB,EAAsB,gBAAtB,EAAuC,MAAvC,EAA+C,OAA/C,EAAuD,YAAvD,EAAoE,KAApE;AACA,SAAKA,aAAL,CAAmB,CAAnB,EAAsB,gBAAtB,EAAuC,MAAvC,EAA+C,OAA/C,EAAuD,OAAvD,EAA+D,KAA/D;AACA,SAAKA,aAAL,CAAmB,CAAnB,EAAsB,gBAAtB,EAAuC,MAAvC,EAA+C,OAA/C,EAAuD,OAAvD,EAA+D,KAA/D;AACA,SAAKA,aAAL,CAAmB,CAAnB,EAAsB,gBAAtB,EAAuC,MAAvC,EAA+C,OAA/C,EAAuD,WAAvD,EAAmE,MAAnE;AAED;;;;kCAEcC,E,EAAIC,W,EAAaC,Y,EAAcC,S,EAAUC,S,EAAUC,gB,EAAkB;AAClF,WAAKR,IAAL,CAAUS,GAAV,CAAcN,EAAd,EAAkB,wBAAUA,EAAV,EAAcC,WAAd,EAA2BC,YAA3B,EAAyCC,SAAzC,EAAmDC,SAAnD,EAA6DC,gBAA7D,CAAlB;AACD;;;kCAEc;AACb,aAAOE,MAAMC,IAAN,CAAW,KAAKX,IAAL,CAAUY,MAAV,EAAX,CAAP;AACD;;;6BAEST,E,EAAI;AACZ,UAAI,KAAKH,IAAL,CAAUa,GAAV,CAAcV,EAAd,CAAJ,EAAuB;AACrB,eAAO,KAAKH,IAAL,CAAUc,GAAV,CAAcX,EAAd,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIY,KAAJ,oBAA2BZ,EAA3B,gBAAN;AACD;AACF;;;2BAEOA,E,EAAIa,U,EAAY;AACtB,UAAI,KAAKhB,IAAL,CAAUa,GAAV,CAAcV,EAAd,CAAJ,EAAuB;AACrB,YAAMc,QAAQ,KAAKjB,IAAL,CAAUc,GAAV,CAAcX,EAAd,CAAd;AACAc,cAAMD,UAAN,GAAmBA,UAAnB;AACA,eAAO,KAAKE,QAAL,CAAcD,MAAMd,EAApB,CAAP;AACD,OAJD,MAIO;AACL,cAAM,IAAIY,KAAJ,oBAA2BZ,EAA3B,gBAAN;AACD;AACF;;;2BAEOc,K,EAAO;AACb,UAAI,KAAKjB,IAAL,CAAUa,GAAV,CAAcI,MAAMd,EAApB,CAAJ,EAA6B;AAC3B,cAAM,IAAIY,KAAJ,uBAA8BE,MAAMd,EAApC,qBAAN;AACD,OAFD,MAEO;AACL,aAAKgB,WAAL,CAAiBF,MAAMd,EAAvB,EAA2Bc,MAAMG,IAAjC,EAAuCH,MAAMI,YAA7C,EAA2DJ,MAAMD,UAAjE;AACA,eAAO,KAAKE,QAAL,CAAcD,MAAMd,EAApB,CAAP;AACD;AACF;;;;;;kBA7CkBJ,O","file":"sttm-dao.js","sourcesContent":["import Model from '../models/sttm-model'\r\n\r\nexport default class SttmDAO {\r\n  constructor () {\r\n    this.data = new Map()\r\n\r\n    this.createMapping(1, 'Company_Name_1',\"CTMS\", \"STUDY\",\"DRAFT\",\"20%\")\r\n    this.createMapping(2, 'Company_Name_2',\"CTMS\", \"STUDY\",\"Inprogress\",\"20%\")\r\n    this.createMapping(3, 'Company_Name_3',\"CTMS\", \"STUDY\",\"DRAFT\",\"20%\")\r\n    this.createMapping(4, 'Company_Name_4',\"CTMS\", \"STUDY\",\"DRAFT\",\"20%\")\r\n    this.createMapping(5, 'Company_Name_5',\"CTMS\", \"STUDY\",\"Completed\",\"100%\")\r\n    \r\n  }\r\n\r\n  createMapping (id, sponserName, sourceSystem, entityMap,mapStatus,mapComplitionPer) {\r\n    this.data.set(id, new Model(id, sponserName, sourceSystem, entityMap,mapStatus,mapComplitionPer));\r\n  }\r\n\r\n  retrieveAll () {\r\n    return Array.from(this.data.values())\r\n  }\r\n\r\n  retrieve (id) {\r\n    if (this.data.has(id)) {\r\n      return this.data.get(id)\r\n    } else {\r\n      throw new Error(`Stock with id ${id} not found`)\r\n    }\r\n  }\r\n\r\n  update (id, lastUpdate) {\r\n    if (this.data.has(id)) {\r\n      const stock = this.data.get(id)\r\n      stock.lastUpdate = lastUpdate\r\n      return this.retrieve(stock.id)\r\n    } else {\r\n      throw new Error(`Stock with id ${id} not found`)\r\n    }\r\n  }\r\n\r\n  create (stock) {\r\n    if (this.data.has(stock.id)) {\r\n      throw new Error(`An stock with id ${stock.id} already exists`)\r\n    } else {\r\n      this.createStock(stock.id, stock.name, stock.currentPrice, stock.lastUpdate)\r\n      return this.retrieve(stock.id)\r\n    }\r\n  }\r\n}\r\n"]}