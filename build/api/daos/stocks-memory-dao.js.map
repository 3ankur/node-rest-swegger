{"version":3,"sources":["../../../api/daos/stocks-memory-dao.js"],"names":["StocksMemoryDAO","data","Map","createStock","Date","now","id","name","currentPrice","lastUpdate","set","Array","from","values","has","get","Error","stock","retrieve"],"mappings":";;;;;;;;AAAA;;;;;;;;IAIqBA,e;AACnB,6BAAe;AAAA;;AACb,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;;AAEA,SAAKC,WAAL,CAAiB,CAAjB,EAAoB,MAApB,EAA4B,MAA5B,EAAoCC,KAAKC,GAAL,EAApC;AACA,SAAKF,WAAL,CAAiB,CAAjB,EAAoB,MAApB,EAA4B,KAA5B,EAAmCC,KAAKC,GAAL,EAAnC;AACA,SAAKF,WAAL,CAAiB,CAAjB,EAAoB,MAApB,EAA4B,MAA5B,EAAoCC,KAAKC,GAAL,EAApC;AACD;;;;gCAEYC,E,EAAIC,I,EAAMC,Y,EAAcC,U,EAAY;AAC/C,WAAKR,IAAL,CAAUS,GAAV,CAAcJ,EAAd,EAAkB,yBAAUA,EAAV,EAAcC,IAAd,EAAoBC,YAApB,EAAkCC,UAAlC,CAAlB;AACD;;;kCAEc;AACb,aAAOE,MAAMC,IAAN,CAAW,KAAKX,IAAL,CAAUY,MAAV,EAAX,CAAP;AACD;;;6BAESP,E,EAAI;AACZ,UAAI,KAAKL,IAAL,CAAUa,GAAV,CAAcR,EAAd,CAAJ,EAAuB;AACrB,eAAO,KAAKL,IAAL,CAAUc,GAAV,CAAcT,EAAd,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIU,KAAJ,oBAA2BV,EAA3B,gBAAN;AACD;AACF;;;2BAEOA,E,EAAIG,U,EAAY;AACtB,UAAI,KAAKR,IAAL,CAAUa,GAAV,CAAcR,EAAd,CAAJ,EAAuB;AACrB,YAAMW,QAAQ,KAAKhB,IAAL,CAAUc,GAAV,CAAcT,EAAd,CAAd;AACAW,cAAMR,UAAN,GAAmBA,UAAnB;AACA,eAAO,KAAKS,QAAL,CAAcD,MAAMX,EAApB,CAAP;AACD,OAJD,MAIO;AACL,cAAM,IAAIU,KAAJ,oBAA2BV,EAA3B,gBAAN;AACD;AACF;;;2BAEOW,K,EAAO;AACb,UAAI,KAAKhB,IAAL,CAAUa,GAAV,CAAcG,MAAMX,EAApB,CAAJ,EAA6B;AAC3B,cAAM,IAAIU,KAAJ,uBAA8BC,MAAMX,EAApC,qBAAN;AACD,OAFD,MAEO;AACL,aAAKH,WAAL,CAAiBc,MAAMX,EAAvB,EAA2BW,MAAMV,IAAjC,EAAuCU,MAAMT,YAA7C,EAA2DS,MAAMR,UAAjE;AACA,eAAO,KAAKS,QAAL,CAAcD,MAAMX,EAApB,CAAP;AACD;AACF;;;;;;kBA1CkBN,e","file":"stocks-memory-dao.js","sourcesContent":["import Model from '../models/stock-model'\r\n\r\n\r\n\r\nexport default class StocksMemoryDAO {\r\n  constructor () {\r\n    this.data = new Map()\r\n\r\n    this.createStock(1, 'AAPL', 161.17, Date.now())\r\n    this.createStock(2, 'MSFT', 72.72, Date.now())\r\n    this.createStock(3, 'GOOG', 930.38, Date.now())\r\n  }\r\n\r\n  createStock (id, name, currentPrice, lastUpdate) {\r\n    this.data.set(id, new Model(id, name, currentPrice, lastUpdate))\r\n  }\r\n\r\n  retrieveAll () {\r\n    return Array.from(this.data.values())\r\n  }\r\n\r\n  retrieve (id) {\r\n    if (this.data.has(id)) {\r\n      return this.data.get(id)\r\n    } else {\r\n      throw new Error(`Stock with id ${id} not found`)\r\n    }\r\n  }\r\n\r\n  update (id, lastUpdate) {\r\n    if (this.data.has(id)) {\r\n      const stock = this.data.get(id)\r\n      stock.lastUpdate = lastUpdate\r\n      return this.retrieve(stock.id)\r\n    } else {\r\n      throw new Error(`Stock with id ${id} not found`)\r\n    }\r\n  }\r\n\r\n  create (stock) {\r\n    if (this.data.has(stock.id)) {\r\n      throw new Error(`An stock with id ${stock.id} already exists`)\r\n    } else {\r\n      this.createStock(stock.id, stock.name, stock.currentPrice, stock.lastUpdate)\r\n      return this.retrieve(stock.id)\r\n    }\r\n  }\r\n}\r\n"]}